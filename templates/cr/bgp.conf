protocols {
    bgp {
        {% for ipversion in [ 4, 6] %}
        replace: group Transit{{ ipversion }} {
            type external;
            log-updown;
            import [ BGP_sanitize_in BGP_transit_in BGP_community_actions ];
            family inet{{ ipversion | trim('4') }} {
                unicast;
            }
            export BGP{{ ipversion | trim('4') }}_outfilter;
            remove-private;
            {% set transits_keys = transits | selectattr('version', 'equalto', ipversion) %}
            {% for ip in transits_keys | sort %}
            {% set attributes = transits[ip] %}
            neighbor {{ ip }} {
                {% if attributes['shutdown'] | d(false) %}
                shutdown;
                {% endif %}
                description "{{ attributes['provider'] }}";
                {% if attributes['import_policy'] | d(false) or transit_providers[attributes['provider']]['import_policy'] | d(false)  %}
                import [ BGP_sanitize_in BGP_transit_in AS{{ transit_providers[attributes['provider']]['AS'] }}_in BGP_community_actions ];
                {% endif %}
                {% if attributes['export_policy'] | d(false) or transit_providers[attributes['provider']]['export_policy'] | d(false) %}
                export [ AS{{ transit_providers[attributes['provider']]['AS'] }}_out BGP{{ ipversion | trim('4') }}_outfilter ];
                {% endif %}
                {% if ipversion == 4 and transit_providers[attributes['provider']]['flowspec'] | d(false) %}
                family inet {
                    unicast;
                    flow;
                }
                {% endif %}
                {% if ip in bgp_keys | d({}) %}
                authentication-key "{{ bgp_keys[ip] }}";
                {% endif %}
                peer-as {{ transit_providers[attributes['provider']]['AS'] }};
                {% if transit_providers[attributes['provider']]['BFD'] | d(false)  %}
                bfd-liveness-detection {
                    minimum-interval 300;
                }
                {% endif %}
            }
            {% endfor %}
        }
        {% endfor %}
        group IX4 {
            replace: type external;
            replace: log-updown;
            replace: damping;
            replace: import [ BGP_sanitize_in BGP_IXP{% if primary_ixp | d(false) %}_PRIMARY{% endif %}_in BGP_community_actions ];
            replace: family inet {
                unicast {
                    prefix-limit {
                        maximum 10000;
                        teardown 80 idle-timeout forever;
                    }
                }
            }
            replace: export BGP_outfilter;
            replace: remove-private;
        }
        group IX6 {
            replace: type external;
            replace: log-updown;
            replace: damping;
            replace: import [ BGP_sanitize_in BGP_IXP{% if primary_ixp | d(false) %}_PRIMARY{% endif %}_in BGP_community_actions ];
            replace: family inet6 {
                unicast {
                    prefix-limit {
                        maximum 4000;
                        teardown 80 idle-timeout forever;
                    }
                }
            }
            replace: export BGP6_outfilter;
            replace: remove-private;
        }
        {% for ipversion in [ 4, 6] %}
        group Private-Peer{{ ipversion }} {
            replace: type external;
            replace: log-updown;
            replace: damping;
            replace: import [ BGP_sanitize_in BGP_Private_Peer_in BGP_community_actions ];
            replace: family inet{{ ipversion | trim('4') }} {
                unicast {
                    prefix-limit {
                        maximum 10000;
                        teardown 80 idle-timeout forever;
                    }
                }
            }
            replace: export BGP{{ ipversion | trim('4') }}_outfilter;
            replace: remove-private;
        }
        {% endfor %}
        replace: group Netflow {
            type internal;
            local-address {{ metadata['ip4'] }};
            import BGP_reject;
            family inet {
                any;
            }
            family inet6 {
                any;
            }
            peer-as {{ confed }};
            local-as {{ confed }} no-prepend-global-as;
            cluster {{ metadata['ip4'] }};
            {% for name, ip in sampling.collectors.items() | sort() %}
            neighbor {{ ip }} {
                description {{ name }};
            }
            {% endfor %}
        }
        {% set bgp_groups = dict(netbox.device_plugin.bgp_servers, **(device_bgp|d({}))) %}
        {% for template_name, bgp_neighbors in bgp_groups.items() %}
          {% include ("includes/bgp/" ~ template_name ~ ".conf") %}
        {% endfor -%}
        replace: bgp-error-tolerance;
    }
}
