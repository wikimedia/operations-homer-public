replace: interfaces {
    apply-groups vrrp;
    {% if netbox.device_plugin.disabled %}
    interface-range disabled {
        {% if netbox.device_plugin.disabled.regular | count > 0 %}
        {% for interface_name in netbox.device_plugin.disabled.regular %}
        member {{ interface_name }};
        {% endfor %}
        description DISABLED;
        disable;
        {% endif %}
    }
    {% for interface_name in netbox.device_plugin.disabled.snowflakes %}
    {{ interface_name }} {
        disable;
    }
    {% endfor %}
    {% for name, config in netbox.device_plugin.junos_router_interfaces.items() %}
    {{ name }} {
        {% if config['mtu'] | d(false) %}
        mtu {{ config['mtu'] }};
        {% endif %}
        {% if config['mac'] | d(false) %}
        mac {{ config['mac'] }};
        {% endif %}
        {% if 'description' in config and config['description'].startswith(("Transit", "Peering", "Customer", "External")) %}
        apply-groups external-links;
        apply-groups-except vrrp;
        {% if not 'ae' in name %}
        gigether-options {
            ignore-l3-incompletes;
        }
        {% endif %}
        {% endif %}
        {% if name in damping | d([]) %}
        /* T196432 */
        damping {
            half-life 15;
            max-suppress 600;
            reuse 100;
            suppress 2000;
            enable;
        }
        {% endif %}
        {% if 'ae' in name %}
        aggregated-ether-options {
            lacp {
                active;
                periodic fast;
            }
            {% if 'mixed' in config %}
            link-speed mixed;
            {% endif %}
            {% if name in minimum_links | d({}) %}
            /* T253122 */
            minimum-links {{ minimum_links[name] }};
            {% endif %}
        }
        {% endif %}
        {% if config['description'] | d(false) %}
        description "{{ config['description'] }}";
        {% endif %}
        {% if 'lag' in config %}
        gigether-options {
            802.3ad {{ config['lag'] }};
        }
        {% endif %}
        {% if 'ips' in config %}
        unit 0 {
            {% for ipversion in [ 4, 6] %}
            {% if config['ips'][ipversion] %}
            family inet{{ ipversion | trim('4') }} {
                {% if 'description' in config and config['description'].startswith(("Customer")) %}
                /* T266561 */
                rpf-check apply-groups-except external-links;
                {% endif %}
                {% for ip in config['ips'][ipversion].keys() %}
                address {{ ip }} {
                    {% if (ip.ip | string == metadata['ip' ~ ipversion ]) and (config['ips'][ipversion] | length > 1) %}
                    preferred;
                    {% endif %}
                }
                {% endfor %}
                filter {
                    {% if 'lo0' in name %}
                    input loopback{{ ipversion }};
                    {% endif %}
                    {% if name + '.0' + '-in' in filters | d({}) %}
                    input {{ filters[name + '.0' + '-in'] }}{{ ipversion }};
                    {% elif name ~ '.0' ~ '-in' ~ ipversion in filters | d({}) %}
                    input {{ filters[name ~ '.0' ~ '-in' ~ ipversion] }}{{ ipversion }};
                    {% endif %}
                    {% if name + '.0' + '-out' in filters | d({}) %}
                    output {{ filters[name + '.0' + '-out'] }}{{ ipversion }};
                    {% endif %}
                }
            }
            {% endif %}
            {% endfor %}
        }
        {% endif %}
        {% if 'sub' in config and not 'lag' in config %}
        {% if 'description' in config and config['description'].startswith(("Transit", "Peering", "Customer")) %}
        apply-groups external-links;
        apply-groups-except vrrp;
        {% endif %}
        {% if not 'gr-' in name %}
        flexible-vlan-tagging;
        encapsulation flexible-ethernet-services;
        {% endif %}
        {% for sub_name, sub_config in config['sub'].items() if sub_name != "0" %}
        unit {{ sub_name }} {
            {% if 'description' in sub_config and sub_config['description'].startswith(("Transit", "Peering", "Customer")) %}
            apply-groups external-links;
            apply-groups-except vrrp;
            {% endif %}
            {% if name + '.' + sub_name in tunnels | d({}) %}
            tunnel {
                source {{ tunnels[name + '.' + sub_name]['source'] }};
                destination {{ tunnels[name + '.' + sub_name]['destination'] }};
            }
            {% endif %}
            {% if not 'gr-' in name %}
            vlan-id {{ sub_name }};
            {% endif %}
            {% if sub_config['description'] | d(false) %}
            description "{{ sub_config['description'] }}";
            {% endif %}
            {% for ipversion in [ 4, 6] %}
            {% if sub_config['ips'][ipversion] %}

            family inet{{ ipversion | trim('4') }} {
                {% if 'description' in sub_config and sub_config['description'].startswith(("Customer")) %}
                /* T266561 */
                rpf-check apply-groups-except external-links;
                {% endif %}
                {% if sub_config['mtu'] != config['mtu'] | d(false) and sub_config['mtu'] %}
                mtu {{ sub_config['mtu'] }};
                {% endif %}
                filter {
                    {% if name + '.' + sub_name + '-in' in filters | d({}) %}
                    input {{ filters[name + '.' + sub_name + '-in'] }}{{ ipversion }};
                    {% elif name ~ '.' ~ sub_name ~ '-in' ~ ipversion in filters | d({}) %}
                    input {{ filters[name ~ '.' ~ sub_name ~ '-in' ~ ipversion] }}{{ ipversion }};
                    {% endif %}
                    {% if name + '.' + sub_name + '-out' in filters | d({}) %}
                    output {{ filters[name + '.' + sub_name + '-out'] }}{{ ipversion }};
                    {% endif %}
                }
                {% if 'ips' in sub_config %}
                {% for ip, ip_config in sub_config['ips'][ipversion].items() %}
                {% if 'vrrp' in ip_config %}
                address {{ ip }} {
                    {% for vrrp_ip, vrrp_group in ip_config['vrrp'].items() %}
                    {% set v6mod = 'inet6-' if ipversion == 6 else '' %}
                    vrrp-{{ v6mod }}group {{ vrrp_group }} {
                        virtual-{{ v6mod }}address {{ vrrp_ip }};
                        {% if name in vrrp_master_pinning | d([]) or name ~ '.' ~ sub_name in vrrp_master_pinning | d([]) %}
                        priority 110;
                        {% endif %}
                        accept-data;
                        track {
                            interface {{ name }}.{{ sub_name }} {
                                {% if vrrp_bandwidth_threshold | d(false) and 'ae' in name %}
                                bandwidth-threshold 20g priority-cost 50;
                                bandwidth-threshold 30g priority-cost 30;
                                {% else %}
                                priority-cost 50;
                                {% endif %}
                            }
                        }
                    }
                    {% endfor %}
                }
                {% if ipversion == 6 %}
                address fe80:0:0:0:fe00::{{ hostname.split('-')[0] | replace('cr', '') }}/64;
                {% endif %}
                {% else %}
                address {{ ip }};
                {% endif %}
                {% endfor %}
                {% endif %}
            }
            {% endif %}
            {% endfor %}
        }
        {% endfor %}
        {% endif %}
    }
    {% endfor %}
    {% endif %}
}
