family inet {
    /* Jinja can't replace variables in Capirca files, so doing it here */
    replace: filter offload-ping4 {
        {% if ping_offload_redirect | d(false)  %}
        term offload-ping4 {
            from {
                destination-address {
                    {{ ping_offload_vip }};
                }
                protocol icmp;
                icmp-type echo-request;
            }
            then {
                next-ip {{ ping_offload_redirect }}/32;
            }
        }
        {% else %}
        /* Placeholder for sites with no ping offload */
        term no-offload {
            then next term;
        }
        {% endif %}
    }
    {% if ping_offload_redirect | d(false)  %}
    /* T190090 */
    replace: filter transport-in4 {
        term no-offload-ping4 {
            from {
                destination-address {
                    {{ ping_offload_vip }};
                }
                source-prefix-list {
                    wikimedia4;
                }
                protocol icmp;
                icmp-type echo-request;
            }
            then accept;
        }
        term offload-ping4 {
            filter offload-ping4;
        }
        term default {
            then accept;
        }
    }
    {% endif %}
    replace: filter border-out4 {
        term special-ranges {
            from {
                prefix-list {
                    special-ranges4;
                }
            }
            then {
                count special-ranges-out;
                discard;
            }
        }
        term default {
            then {
                sample;
                accept;
            }
        }
    }
    /* T244147 */
    replace: filter sample-drop4 {
        term default {
            then {
                sample;
                discard;
            }
        }
    }
    /* T285461 */
    replace: filter rpf-exceptions4 {
        term allow-dhcp {
            from {
                source-address {
                    0.0.0.0/32;
                }
                destination-address {
                    255.255.255.255/32;
                }
            }
            then accept;
        }
        term default {
            then discard;
        }
    }
}
family inet6 {
    replace: filter border-out6 {
        term special-ranges {
            from {
                prefix-list {
                    special-ranges6;
                }
            }
            then {
                count special-ranges-out;
                discard;
            }
        }
        /* Deny outgoing traffic from private IPv6 ranges */
        term private {
            from {
                source-prefix-list {
                    private6;
                }
            }
            then {
                reject administratively-prohibited;
            }
        }
        term default {
            then {
                sample;
                accept;
            }
        }
    }
    /* T244147 */
    replace: filter sample-drop6 {
        term default {
            then {
                sample;
                discard;
            }
        }
    }
}
policer policer-1m {
    if-exceeding {
        bandwidth-limit 1m;
        burst-size-limit 100k;
    }
    then discard;
}
policer policer-2m {
    if-exceeding {
        bandwidth-limit 2m;
        burst-size-limit 500k;
    }
    then discard;
}
