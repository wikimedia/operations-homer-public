security {
      replace: log {
        {% if security_log | d({}) %}
          mode stream;
          format syslog;
          source-address {{ security_log['source'] }};
          transport {
              protocol tls;
              tls-profile syslog-tls-profile;
          }
          {% for name,ip in security_log['streams'].items() | d({}) %}
          stream {{ name }} {
              format syslog;
              category all;
              host {
                  {{ ip }};
                  port 6514;
              }
          }
          {% endfor %}
        {% else %}
        mode event;
        {% endif %}
      }
      replace: ike {
          {% for int_name, int_conf in netbox.device_plugin.junos_interfaces.items() if int_name.startswith('st') %}
          proposal {{ int_name }}-ike-proposal {
              authentication-method pre-shared-keys;
              dh-group group{{ int_conf.tunnel.ipsec.ike_proposal.dh_group }};
              encryption-algorithm {{ int_conf.tunnel.ipsec.ike_proposal.encryption }};
          }
          policy {{ int_name }}-ike-policy {
              proposals {{ int_name }}-ike-proposal;
              pre-shared-key ascii-text "{{ ike_psk[int_conf.tunnel.name] }}";
          }
          gateway {{ int_name }}-ike-gateway {
              ike-policy {{ int_name }}-ike-policy;
              address {{ int_conf.tunnel.destination }};
              version v2-only;
              external-interface lo0;
          }
          {% endfor %}
      }
      replace: ipsec {
          {% for int_name, int_conf in netbox.device_plugin.junos_interfaces.items() if int_name.startswith('st') %}
          proposal {{ int_name }}-ipsec-proposal {
              protocol esp;
              encryption-algorithm {{ int_conf.tunnel.ipsec.ipsec_proposal.encryption }};
          }
          policy {{ int_name }}-ipsec-policy {
              perfect-forward-secrecy {
                  keys group{{ int_conf.tunnel.ipsec.pfs_dh_group }};
              }
              proposals {{ int_name }}-ipsec-proposal;
          }
          vpn {{ int_conf.tunnel.name }} {
              bind-interface {{ int_name }}.0;
              vpn-monitor {
                  optimized;
              }
              ike {
                  gateway {{ int_name }}-ike-gateway;
                  ipsec-policy {{ int_name }}-ipsec-policy;
              }
              establish-tunnels immediately;
          }
          {% endfor %}
      }
      replace: zones {
        {% for zone in security_zones | d([]) -%}
        security-zone {{ zone.name }} {
            {% if zone.name in ['untrust', 'customers'] and metadata['role'] == 'mr'  -%}
            screen untrust-screen;
            {% endif -%}
            interfaces {
            {% for interface in zone.interfaces | d([]) -%}
                {{ interface }} {
                    host-inbound-traffic {
                        system-services {
                            {% for service in zone.services if service in juniper_services %}
                            {{ service }};
                            {% endfor -%}
                        }
                        protocols {
                            {% for service in zone.services if service in juniper_protocols %}
                            {{ service }};
                            {% endfor -%}
                        }
                    }
                }
            {% endfor -%}
            }
        }
        {% endfor -%}
    }
    replace: forwarding-options {
        family {
            inet6 {
                mode flow-based;
            }
        }
    }
    replace: alg {
        /* CVE-2018-0002 - T184710 */
        dns disable;
        ftp disable;
        h323 disable;
        mgcp disable;
        /* CVE-2017-10608 */
        msrpc disable;
        /* CVE-2017-10608 */
        sunrpc disable;
        rsh disable;
        rtsp disable;
        sccp disable;
        sip disable;
        sql disable;
        talk disable;
        pptp disable;
    }
    replace: screen {
        {% if screen | d([]) %}
        ids-option untrust-screen {
            icmp {
                ip-sweep;
                fragment;
                flood threshold {{ screen.icmp_flood_threshold }};
                ping-death;
            }
            ip {
                bad-option;
                record-route-option;
                timestamp-option;
                security-option;
                stream-option;
                source-route-option;
                unknown-protocol;
                tear-drop;
            }
            tcp {
                syn-fin;
                fin-no-ack;
                tcp-no-flag;
                syn-frag;
                syn-flood {
                    alarm-threshold {{ screen.tcp_syn_flood_alarm }};
                    attack-threshold {{ screen.tcp_syn_flood_attack }};
                    source-threshold {{ screen.tcp_syn_flood_source }};
                    destination-threshold {{ screen.tcp_syn_flood_dest }};
                    timeout 20;
                }
                land;
                winnuke;
            }
            udp {
                flood threshold {{ screen.udp_flood }};
                udp-sweep;
            }
        }
        {% endif %}
    }
}
