{% set loopback = (netbox.device_plugin.junos_interfaces['lo0']['ips'][4].keys() | list)[0].ip %}
{% set asn = evpn_bgp.asn %}
{% filter indent(width=4) %}
bgp {
    log-updown;
    replace: group EVPN_IBGP {
        type internal;
        local-address {{ loopback }};
        family evpn {
            signaling;
        }
        {# Iterate over RR cluster groups to find which one device is in and its role #}
        {% set bgp_settings = [] %}
        {% for cluster_name, device_roles in evpn_bgp.clusters.items() %}
        {% for role, members in device_roles.items() if loopback in members.values() %}
        {% set _ = bgp_settings.append({'cluster': cluster_name, 'role': role}) %}
        {% endfor %}
        {% endfor %}
        {% set cluster = bgp_settings[0].cluster %}
        {% set role = bgp_settings[0].role %}
        {% if role == "rr" %}
        cluster {{ loopback }};
        {% endif %}
        peer-as {{ asn }};
        multipath;
        bfd-liveness-detection {
            minimum-interval 300;
            multiplier 3;
        }
        {% if role == "client" %}
        {# Peer with the RRs in our own cluster #}
        {% for peer_name, peer_ip in evpn_bgp.clusters[cluster].rr.items() if peer_ip != loopback %}
        neighbor {{ peer_ip }} {
            description {{ peer_name }};
        }
        {% endfor %}
        {% endif %}
        {% if role == "rr" %}
        {# Peer with the RRs in all clusters #}
        {% for cluster_name, device_roles in evpn_bgp.clusters.items() %}
        {% for peer_name, peer_ip in device_roles.rr.items() if peer_ip != loopback %}
        neighbor {{ peer_ip }} {
            description {{ peer_name }};
        }
        {% endfor %}
        {% if cluster_name == cluster %}
        {# Also peer with the clients in our own cluster #}
        {% for peer_name, peer_ip in device_roles.client.items() %}
        neighbor {{ peer_ip }} {
            description {{ peer_name }};
        }
        {% endfor %}
        {% endif %}
        {% endfor %}
        {% endif %}
    }
}
replace: evpn {
    vni-options {
        {% for vid in netbox.device.vlans.keys() | sort() %}
        vni 200{{ vid }} {
            vrf-target target:{{ asn }}:{{ vid }};
        }
        {% endfor %}
    }
    encapsulation vxlan;
    multicast-mode ingress-replication;
    extended-vni-list all;
}
replace: l2-learning {
    global-mac-table-aging-time 1200;
    global-mac-ip-table-aging-time 600;
}
{% endfilter %}
